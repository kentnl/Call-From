=head1 NAME

Call::From - Call functions/methods with a fake caller()

=head1 SYNOPSIS

  use Call::From qw( call_method_from );

  my $proxy = call_method_from('Fake::Namespace');

  Some::Class->$proxy( method_name => @args ); # Some::Class->method_name( @args ) with caller() faked.

=head1 DESCRIPTION

Call::From contains a collection of short utility functions to ease calling
functions and methods from faked calling contexts without requiring arcane
knowledge of Perl eval tricks.

=head1 EXPORTS

The following functions and variables are exportable on request.

=head2 C<call_method_from>

  my $function = call_method_from( CONTEXT_SPEC );
  $invocant->$function( method_name => @args );

Alternatively:

  $invocant->${ \call_method_from( CONTEXT_SPEC ) }( method_name => @args );

=head2 C<call_function_from>

  my $function = call_function_from( CONTEXT_SPEC );
  $function->( "Class::Name::function" , @args );

Alternatively:

  my $function = call_function_from( CONTEXT_SPEC );
  $function->( Class::Name->can('function') , @args );

Or

  call_function_from( CONTEXT_SPEC )->( "Class::Name::function", @args );

=head2 C<$_call_from>

  $invocant->$_call_from( CONTEXT_SPEC, method_name => @args );

=head1 SPECIFYING A CALLING CONTEXT

Calling contexts can be specified in a number of ways.

=head2 Numeric Call Levels

In functions like C<import>, you're most likely wanting to chain caller
meta-data from whoever is calling C<import>

So for instance:

  package Bar;
  sub import {
    my $proxy = call_method_from(1);
    vars->$proxy( import => 'world');
  }
  package Foo;
  Bar->import();

Would trick `vars` to seeing `Foo` as being the calling C<package>, with the line
of the C<< Bar->import() >> call being the C<file> and C<line> of the apparent
caller in C<vars::import>

This syntax is essentially shorthand for

  call_method_from([ caller(1) ])

=head2 Package Name Caller

Strings describing the name of the calling package allows you to conveniently
call functions from arbitrary name-spaces for C<import> reasons, while
preserving the C<file> and C<line> context in C<Carp> stack traces.

  package Bar;
  sub import {
    vars->${\call_method_from('Quux')}( import => 'world');
  }
  package Foo;
  Bar->import();

This example would call C<< vars->import('world') >> from inside the C<Quux>
package, while C<file> and C<line> data would still indicate an origin inside
C<Bar> ( on the line that C<call_method_from> was called on )

This syntax is essentially shorthand for:

  call_method_from([ $package, __FILE__, __LINE__ ])

=head2 ArrayRef of Caller Info

Array References in the form

  [ $package, $file, $line ]

Can be passed as a C<CALLING CONTEXT>. All fields are optional and will be
supplemented with the contents of the calling context when missing.

Subsequently:

  call_method_from([])
    == call_method_from()
    == call_method_from([__PACKAGE__, __FILE__, __LINE__])

  call_method_from(['Package'])
    == call_method_from('Package')
    == call_method_from(['Package', __FILE__, __LINE__])

  call_method_from(['Package','file'])
    == call_method_from(['Package','file', __LINE__])
